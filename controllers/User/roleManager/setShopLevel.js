const { AppError, sendResponse } = require("../../../helpers/utils");
const Seller = require("../../../models/Seller");

const setShopLevel = async (req, res, next) => {
  try {
    const { SellerID } = req.params; // l·∫•y sellerId t·ª´ URL

    const { newLevel } = req.body;

    // ‚úÖ Ki·ªÉm tra ph√¢n quy·ªÅn ‚Äî ch·ªâ admin ho·∫∑c staff m·ªõi ƒë∆∞·ª£c g√°n c·∫•p
    if (!req.user || !["admin", "staff"].includes(req.user.role)) {
      throw new AppError(403, "Access denied. Only admins or staff can set shop level.");
    }

    // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!SellerID || !newLevel) {
      throw new AppError(400, "SellerID and newLevel are required.");
    }

    // ‚úÖ Validate c·∫•p ƒë·ªô h·ª£p l·ªá
    const allowedLevels = ["Shop Mall", "Ch√≠nh H√£ng", "Shop Gi√° R·∫ª", "Shop Th∆∞·ªùng"];
    if (!allowedLevels.includes(newLevel)) {
      throw new AppError(400, "Invalid shop level provided.");
    }

    // ‚úÖ Truy v·∫•n v√† c·∫≠p nh·∫≠t Seller
    const seller = await Seller.findById(SellerID);
    if (!seller) {
      throw new AppError(404, "Seller not found.");
    }

    seller.level = newLevel;
    await seller.save();

    return sendResponse(res, 200, true, seller, null, `Shop level updated to ${newLevel} successfully.`);
  } catch (error) {
    console.error("üî• setShopLevel Error:", error);
    next(error);
  }
};

module.exports = setShopLevel;